---
alwaysApply: true
---

# QZY — MVP Build Plan

> RN(Expo, TS) + Convex + Gemini / 젠지 감성 퀴즈로서, **솔로 러시 + 더블다운**을 핵심 루프으로 1–2주 내 출시 목표.

---

## 1) MVP 범위 (Scope)

**필수**

* 익명/소셜 로그인(Apple/Google 중 1종 이상)
* 데일리 세트(8문항 + 더블다운 1): 오늘 날짜별 고정 세트
* 타이머(문항당 20s), 힌트 1종(보기 2개 제거)
* 점수 계산(기본 +100, 속도보너스, 콤보, 더블다운)
* 결과 화면(점수/정답률/공유 스티커)
* 기본 리더보드(데일리 Top 100)
* 분석 이벤트(Amplitude/Segment)

**선택(시간 남으면)**

* Pseudo-UGC 캡션 프리셋 3종
* 간단한 테마팩(우주/공룡 각 10문항)

**제외(차기)**

* PVP/파티, 시즌패스, 코스메틱, 정교한 적응 난이도, 풀 다크모드

---

## 2) 시스템 아키텍처 (요약)

* **Client**: Expo Router, Zustand(로컬), React Query(서버 캐시), Reanimated
* **Backend**: Convex(문제/세션/리더보드/스토리지), Edge 권장
* **AI**: Convex `action`에서 Gemini 호출(문항 생성/설명), 초기는 Seeded DB + Gemini 말맛/오답 생성 보조

```
App (Expo) ──(https)── Convex (queries/mutations/actions) ── Gemini API
                        └── Storage(이미지/셋 JSON)
```

---

## 3) 개발 환경 & 초기 세팅

```bash
# 0) 요구사항: Node 20+, Xcode/Android Studio, Expo Go(테스트)

# 1) 프로젝트 생성
npx create-expo-app@latest qzy --template expo-template-blank-typescript
cd qzy

# 2) 핵심 라이브러리
npm i zustand @tanstack/react-query expo-router react-native-reanimated moti lottie-react-native expo-av
npm i -D tailwind-variants nativewind @types/lodash

# 3) Convex
npm i convex
npx convex dev # 최초 초기화(별도 터미널)

# 4) 분석/로그
npm i @amplitude/analytics-react-native

# 5) iOS/Android 빌드 준비
npx expo prebuild -p ios -p android
```

---

## 4) 디렉토리 구조 (제안)

```
app/
  _layout.tsx           # expo-router 스택
  index.tsx             # Home
  play.tsx              # 플레이
  result.tsx            # 결과
  (components)/         # UI 컴포넌트
    QuizCard.tsx
    ProgressBar.tsx
    HintButton.tsx
    DoubleDownBanner.tsx
  (lib)/
    colors.ts
    score.ts            # 점수/콤보/타이머 보너스
    useGameStore.ts     # Zustand 상태
    trpc.ts (옵션)      # 없음, Convex 전용이면 제거
convex/
  schema.ts
  daily.ts              # getTodaySet
  quiz.ts               # start/submit/finalize
  leaderboard.ts
  ai.ts                 # Gemini 보조(선택)
```

---

## 5) Convex 스키마 (MVP 최소)

```ts
// convex/schema.ts
import { defineSchema, defineTable, v } from "convex/server";
export default defineSchema({
  users: defineTable({
    handle: v.string(),
    createdAt: v.number(),
    provider: v.string(),
  }).index("by_handle", ["handle"]),

  questionBank: defineTable({
    stem: v.string(),
    choices: v.array(v.object({ id: v.string(), text: v.string() })),
    answerId: v.string(),
    subject: v.string(), // math|science|history|language|etc
    difficulty: v.number(), // 0~1
    locale: v.string(), // ko|en
    reviewed: v.boolean(),
  }).index("by_locale_diff", ["locale", "difficulty"]),

  dailySets: defineTable({
    date: v.string(), // YYYY-MM-DD
    questionIds: v.array(v.id("questionBank")),
    locale: v.string(),
  }).index("by_date_locale", ["date", "locale"]),

  sessions: defineTable({
    userId: v.id("users"),
    setId: v.id("dailySets"),
    answers: v.array(v.object({ qid: v.id("questionBank"), choiceId: v.string(), elapsedMs: v.number(), correct: v.boolean() })),
    score: v.number(),
    hintsUsed: v.number(),
    status: v.string(), // active|done
    startedAt: v.number(),
    finishedAt: v.optional(v.number()),
  }).index("by_user", ["userId"]),

  leaderboards: defineTable({
    date: v.string(),
    userId: v.id("users"),
    score: v.number(),
    handle: v.string(),
  }).index("by_date_score", ["date", "score"]),
});
```

---

## 6) Convex API (핵심 쿼리/뮤테이션)

```ts
// convex/daily.ts
import { query, mutation } from "./_generated/server";
import { v } from "convex/values";

export const getTodaySet = query({
  args: { locale: v.string() },
  handler: async (ctx, { locale }) => {
    const today = new Date().toISOString().slice(0,10);
    let set = await ctx.db.query("dailySets").withIndex("by_date_locale", q => q.eq("date", today).eq("locale", locale)).first();
    if (!set) {
      const qs = await ctx.db.query("questionBank").withIndex("by_locale_diff", q => q.eq("locale", locale)).take(9);
      const id = await ctx.db.insert("dailySets", { date: today, questionIds: qs.map(q=>q._id), locale });
      set = await ctx.db.get(id)!;
    }
    return set;
  }
});

// convex/quiz.ts
export const startSession = mutation({
  args: { setId: v.id("dailySets"), userId: v.id("users") },
  handler: async (ctx, args) => {
    const sid = await ctx.db.insert("sessions", { ...args, answers: [], score: 0, hintsUsed: 0, status: "active", startedAt: Date.now() });
    return sid;
  }
});

export const submitAnswer = mutation({
  args: { sessionId: v.id("sessions"), qid: v.id("questionBank"), choiceId: v.string(), elapsedMs: v.number() },
  handler: async (ctx, { sessionId, qid, choiceId, elapsedMs }) => {
    const s = await ctx.db.get(sessionId);
    if (!s || s.status !== "active") throw new Error("Invalid session");
    const q = await ctx.db.get(qid);
    if (!q) throw new Error("Invalid question");
    const correct = q.answerId === choiceId;
    const base = correct ? 100 : 0;
    const bonus = correct ? Math.max(0, Math.floor((10000 - elapsedMs) / 200)) : 0; // 0~50 근사
    const newScore = s.score + base + bonus;
    await ctx.db.patch(sessionId, { score: newScore, answers: [...s.answers, { qid, choiceId, elapsedMs, correct }] });
    return { correct, score: newScore };
  }
});

export const finalize = mutation({
  args: { sessionId: v.id("sessions"), doubleDown: v.boolean() },
  handler: async (ctx, { sessionId, doubleDown }) => {
    const s = await ctx.db.get(sessionId);
    if (!s || s.status !== "active") throw new Error("Invalid session");
    const corrects = s.answers.filter(a=>a.correct).length;
    const baseScore = s.score;
    const dd = doubleDown ? (corrects === s.answers.length ? baseScore * 2 : 0) : baseScore;
    const final = doubleDown ? dd : baseScore;
    await ctx.db.patch(sessionId, { status: "done", finishedAt: Date.now(), score: final });

    const date = new Date().toISOString().slice(0,10);
    await ctx.db.insert("leaderboards", { date, userId: s.userId, score: final, handle: "player" });
    return { final };
  }
});
```

---

## 7) 클라이언트 상태 모델 (Zustand)

```ts
// app/lib/useGameStore.ts
import { create } from "zustand";

type State = {
  setId?: string;
  questions: { id: string; stem: string; choices: {id:string;text:string;}[]; answerId: string; }[];
  index: number; // 0..8
  score: number;
  locked: boolean;
};

type Actions = {
  hydrate: (payload: Partial<State>) => void;
  lock: () => void; unlock: () => void;
  next: () => void;
  reset: () => void;
};

export const useGameStore = create<State & Actions>((set) => ({
  questions: [], index: 0, score: 0, locked: false,
  hydrate: (p) => set(p as any),
  lock: () => set({ locked: true }),
  unlock: () => set({ locked: false }),
  next: () => set(s => ({ index: Math.min(s.index + 1, (s.questions.length-1)) })),
  reset: () => set({ questions: [], index: 0, score: 0, locked: false }),
}));
```

---

## 8) UI 컴포넌트 요지

```tsx
// app/(components)/QuizCard.tsx
import { View, Text, Pressable } from 'react-native';
import Animated, { FadeIn, ZoomIn } from 'react-native-reanimated';

type Props = { stem: string; choices: {id:string;text:string;}[]; onSelect:(id:string)=>void; locked?: boolean };
export default function QuizCard({ stem, choices, onSelect, locked }: Props) {
  return (
    <Animated.View entering={FadeIn} style={{ gap: 12 }}>
      <Text style={{ fontSize: 20, fontWeight: '600' }}>{stem}</Text>
      {choices.map(c => (
        <Animated.View key={c.id} entering={ZoomIn}>
          <Pressable onPress={() => onSelect(c.id)} disabled={locked} style={{ padding: 16, borderRadius: 16, backgroundColor: 'rgba(255,255,255,0.85)' }}>
            <Text style={{ fontSize: 16 }}>{c.text}</Text>
          </Pressable>
        </Animated.View>
      ))}
    </Animated.View>
  );
}
```

---

## 9) Gemini 연동(초기 운영안)

* **전략**: 초반은 수작업 Seed + Gemini로 **보기 튜닝/말맛/오답**만 생성 → 사람이 검토 후 `questionBank.reviewed=true`로 확정
* **Action 예시**

```ts
// convex/ai.ts (개요)
import { action } from "./_generated/server";
export const polishChoices = action({ args: { stem: v.string(), correct: v.string(), locale: v.string() }, handler: async (ctx, args) => {
  // Gemini 호출하여 distractors 3개 생성, 톤/난이도 가이드 포함
  // 반환: choices[]
}});
```

---

## 10) 점수 규칙 (MVP 고정)

* 정답 +100
* 속도 보너스: `(10s - t) * 5` → 0\~50 근사 (서버와 클라 동일 로직 유지)
* 콤보 보너스: 3연속 +15, 5연속 +40 (시간되면)
* 더블다운: 마지막 문항 성공 시 총점 ×2, 실패 시 0 (MVP는 ‘마지막 문항 정답 시에만 사용 가능’으로 단순화)

---

## 11) 분석 이벤트 (Amplitude)

* `app_open`, `login_success`
* `daily_set_loaded {date, q_count}`
* `question_answered {qid, correct, elapsed_ms}`
* `hint_used {type}`
* `double_down_clicked {success}`
* `result_shared {channel}`

---

## 12) QA 체크리스트 (MVP)

* 타이머 20s 정확성(백그라운드/포그라운드 전환 시 동작)
* 네트워크 불안정 시 재시도/오프라인 복구(React Query retry)
* 더블다운 실패 경로(점수 0) UX 명확성
* 공유 이미지/캡션 권한(iOS Photos/Android Media)
* 접근성: 폰트 확대, 색 대비, 햅틱 on/off

---

## 13) 출시 체크리스트

* 앱 이름/아이콘/스플래시(브랜드 톤: #6f1d1b + 파스텔 그라데이션)
* 개인정보 처리방침/서비스 약관(링크)
* 스토어 스크린샷 5장(홈/플레이/힌트/더블다운/결과)
* TestFlight/Closed Track 내부 테스트 20명
* 크래시프리율 ≥ 99%, App Size ≤ 120MB

---

## 14) 일정 (10일 플랜)

* **D1\~2**: 프로젝트 세팅, Convex 스키마/`getTodaySet`/`startSession`
* **D3**: `submitAnswer`/타이머/점수 로직, QuizCard
* **D4**: `finalize`/더블다운 UI, ResultScreen, 공유 스티커 v1
* **D5**: 리더보드 쿼리/화면, 분석 이벤트 기초
* **D6**: 힌트 1종, 로딩/에러 상태, 스켈레톤
* **D7**: Seed 데이터 100문항 주입, 로컬라이제이션(ko)
* **D8**: QA 1차/성능(이미지/메모리), 접근성
* **D9**: 아이콘/스플래시/스토어 메타(캡션), 베타 배포
* **D10**: 버그픽스/계측 보완/퍼포먼스 튜닝

---

## 15) 작업 티켓(샘플)

1. Convex: schema.ts 작성
2. Convex: daily.getTodaySet
3. Convex: quiz.startSession/submitAnswer/finalize
4. App: expo-router 스택/\_layout
5. App: Zustand store & score.ts
6. App: PlayScreen(타이머/잠금/정오답 애니)
7. App: ResultScreen(점수/정답률/공유)
8. App: LeaderboardScreen
9. Analytics: 이벤트 바인딩
10. Seed 데이터 주입 스크립트

---

## 16) Seed 데이터 주입(간단 스크립트 개요)

* 로컬 JSON(`seeds/ko_core.json`) → Convex `mutation`으로 `questionBank` 삽입
* 필드: `{stem, choices: [{id,text}], answerId, subject, difficulty, locale: "ko", reviewed: true}`

---

## 17) 브랜딩/디자인 가이드(라이트 우선)

* Primary: `#6f1d1b`, Text: `#2E2E2E`, Icon: `#8B7DB8`
* Gradient: `['#ff9a9e', '#fad0c4', '#fadadd']`
* 카드 Radius 20–24, Blur 12–20, Shadow 약하게
* 정답: 작은 체크 아이콘(가독성↑), 오답: 젤리 흔들림

---

## 18) 리스크 & 완화

* **콘텐츠 품질**: Seed 우선 → Gemini 보조 + 수동 검수 슬라이딩 창구
* **시간 초과**: PVP/시즌 제외, 오로지 솔로 루프 최적화
* **심사 리젝**: 교육 카테고리/연령 적합성 명시, 개인정보 최소 수집

---

## 19) 다음 단계(차기 릴리즈 후보)

* PVP 동기 배틀(소규모), 시즌 프레임/미션
* 적응 난이도(정답로그 기반 IRT 근사)
* 크리에이터 문제팩(큐레이션/검수/수익쉐어)
