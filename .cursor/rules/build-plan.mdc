---
alwaysApply: true
---

빌드 플랜 (Expo + Convex · TypeScript)

0) 목표 & 원칙
- MVP를 6주 내 출시. 플랜 참조 문서: 퀴즈 게임 플랜
- 최소 변경·기존 네이밍/컨벤션 유지. 서버가 점수 최종 산출.
- 성능 기본값(Hermes, 프리로드), 접근성 준수(AA), 오프라인 보호.

1) 프로젝트 부트스트랩
- 템플릿 생성: npx create-expo-app
- 라우팅: expo-router
- 의존성: react-native-reanimated, react-native-gesture-handler, react-native-svg, expo-blur, expo-haptics, expo-av, expo-notifications, react-native-view-shot, zustand, @tanstack/react-query, convex, zod, dayjs
- Reanimated/Hermes 설정: babel plugins, iOS Hermes on, Android Proguard/R8
- Convex 초기화: npx convex init → schema 작성 후 npx convex dev
- 앱 설정: app.json 권한, 딥링크 스킴, GoogleService-Info.plist / google-services.json 배치
- EAS: eas.json 채널(dev/preview/prod) 및 프로필 구성

2) 폴더 구조(스캐폴드)
app/
  index.tsx
  (tabs)/
  quiz/
components/
  QuestionCard.tsx, RadialTimer.tsx, Particles.tsx, DoubleDownModal.tsx, ShareSticker.tsx, glass-card.tsx
context/
  quiz-setup-context.tsx, gamification-HUD.tsx, points-animation.tsx
store/
  gameStore.ts (Zustand)
hooks/
  useGame.ts, useCountdown.ts, use-auth.ts, use-quiz-gamification.ts
utils/
  scoring.ts, difficulty.ts, 포맷터/랜덤/로깅 유틸
theme/
  tokens.ts, typography.ts
lib/
  convexClient.ts, analytics.ts
convex/
  schema.ts, sessions.ts, questions.ts, leaderboards.ts, daily.ts, reports.ts, inventories.ts, gamification.ts

3) 데이터/서버(Convex)
- 스키마: users, sessions, questions, leaderboards, inventories, purchases, reports, ai_prompts
- 인덱스: questions.by_category, leaderboards.by_period_user, sessions.by_user_status
- 핵심 함수
  getDailySeed(query)
  startSession(action)
  submitAnswer(action)
  endSession(action)
  getWeeklyLeaderboard(query)
  reportQuestion(action)
- 보안/무결성: 유저 스코프 RLS, 리더보드 쓰기 레이트리밋, 서버에서 점수/스트릭 계산

4) 게임 루프(MVP)
- 런(10Q) + 더블다운(성공 x1.3 / 실패 x0.7)
- 난이도 곡선 적용, Q 카드 전환 애니메이션, 라디얼 타이머
- 스코어링: calcScore(base=100, msLeft, streak), 스트릭 멀티플라이어 cap 1.5x
- UI 피드백: 글래스 카드, 그라데이션, 스프링 이징, 파티클, 5초 이하 햅틱
- 오프라인: 답안 로컬 큐잉 → 재접속 시 syncSession

5) AI 파이프라인(Gemini)
- 출력 규격(JSON only): stem, choices[4], answerIndex, explanation, gradeBand, flags, difficulty(1~5)
- 검증: Zod 스키마 → 지식 충돌 룰 → 난이도 휴리스틱(정답률 기반) → 샘플링 플레이테스트
- 노출 튜닝: EWMA 정답률로 difficulty 재라벨링, 품질(ELO 유사)로 가중치
- 안전/표절: Safety + 금칙어 룰 + 신고 루프 연계

6) 분석/성장
- 이벤트: session_start, question_shown, answer_submit(correct, ms_left), double_down_open/confirm/result, streak_milestone, share_export, daily_claim, purchase_success, report_submit
- 도구: Amplitude(PostHog 대체 가능), Branch(리퍼럴)

7) 빌드/릴리스 & 성능
- 개발 실행: expo run:ios|android
- 프리로드/최적화: 이미지/폰트 프리로드, expo-router chunk split, 느린 디바이스 모드(파티클/블러 감소)
- 접근성: 폰트 스케일 대응, 대비(AA), 보이스오버 라벨, 햅틱 최소화 토글
- 캐시 이슈 원라이너: watchman watch-del-all && rm -rf node_modules && npm i && (cd ios && pod install && cd ..)

8) 주차별 마일스톤(6주)
- W1: 셋업(Expo/Convex/Router/Zustand/Query), 디자인 토큰, 기본 네비
- W2: 플레이 루프(RadialTimer, QuestionCard, 스코어/결과, 햅틱/파티클)
- W3: Gemini 생성/검증, 초기 500문항 시드 및 업로드 유틸
- W4: 스트릭/배지/데일리, 주간 리더보드
- W5: 신고/운영 툴, 성능 최적화, 크래시/로그
- W6: 현지화(ko), 스토어 빌드, 크리에이티브, 소프트런치

9) 리스크 & 대응
- AI 품질 변동: 다중 검증 + 신고 루프 + 품질 하한
- 난이도 붕괴: 정답률 기반 리발런싱(EWMA)
- 성능: Hermes, 프리로드, 파티클/블러 다운스케일
- 안티치트: 서버 타임스탬프, 지연/다중 제출 차단

10) 초기 실행 커맨드(레퍼런스)
npx create-expo-app@latest qzy --template
cd qzy
npm i zustand @tanstack/react-query convex zod dayjs react-native-svg react-native-reanimated react-native-gesture-handler expo-blur expo-haptics expo-av expo-notifications react-native-view-shot
npx convex init && npx convex dev
npx expo run:ios
npx expo run:android